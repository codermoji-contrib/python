os: windows # windows | linux | osx
level: 1 # Difficulty level 1-5
status: active # could be active | disabled | draft
setup:
    script: mkfs.py  # This gets run to set up the env for term cmds.
sequence: # Must be ordered (sequence!)
    - question_format: md
      question: >
        # The `sys` library

        When you run your programs, you can give data on
        the command line.

        Using the `sys` library, write a program to
        show the list of everything that was given on the
        command-line when your code is run.
      filesystem: fs1.yaml
      editor:
          - {name: showargs.py, contents: ""}
      answer: # This is the answer for this q, and setup for next q
            editor:
                - {name: showargs.py, contents: showargs1.py}
    - question_format: md
      question: >
        # The `sys` library

        Now run your program in the terminal.
      answer: # This is the answer for this q, and setup for next q
            term_format: txt
            term: "python showargs.py"
            termoutput: t1.txt
    - question_format: md
      question: >
        # The `sys` library

        Now run your program _again_, but this time, add some extra
        information when you run your code. Add on the word "test123" and
        also add the number "12345" on the command line in the terminal.
      answer: # This is the answer for this q, and setup for next q
            term_format: txt
            term: "python showargs.py test123 12345"
            termoutput: t2.txt
    - question_format: md
      question: >
        # The `sys` library

        Cool! We can do neat things with this.

        Change your code to print the sum of the 2nd and 3rd elements of
        `sys.argv`. `sys.argv` elements are always given as text, so you will
        have to force them to be numbers using the `int()` function. _And make
        sure all your brackets are correct!_
      answer: # This is the answer for this q, and setup for next q
            editor:
                - {name: showargs.py, contents: showargs2.py}
    - question_format: md
      question: >
        # The `sys` library

        Now run your program, and include the number "4" and the
        number "5" as part of the command.
      answer: # This is the answer for this q, and setup for next q
            term_format: txt
            term: "python showargs.py 4 5"
            termoutput: t3.txt

